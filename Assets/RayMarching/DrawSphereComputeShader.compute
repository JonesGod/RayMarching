#pragma kernel DrawSphere

RWTexture2D<float4> _Result;

float3 _SphereWorldPos;
float _SphereRadius;
float2 _ScreenResolution;
float3 _LightDirection;

float3 _CameraPosition;
//CameraMatrix
float4x4 _CameraInvViewProj;

float3 GetPixelRayDir(float2 pixelXY )
{
    float2 uv = (pixelXY.xy / float2(_ScreenResolution.x, _ScreenResolution.y)) * 2.0 - 1.0;
    float4 ndcPos = float4(uv, 1.0, 1.0);
    float4 worldPos = mul(_CameraInvViewProj, ndcPos);
    worldPos /= worldPos.w;
    return normalize(worldPos.xyz - _CameraPosition);
}

float IsSphereContactWithRay(float3 pixelRay, float3 cameraPos, float3 sphereWorldPos, float sphereRadius )
{
    float3 cameraToSphereVector = sphereWorldPos - cameraPos;
    float camToSphereLength = length(cameraToSphereVector);
    if(camToSphereLength < sphereRadius) //inside the sphere
    {
        return -1;
    }

    float dotRayL = dot(cameraToSphereVector, pixelRay);    //斜邊(cameraToSphereVector)在射線方向上的投影
    if(dotRayL < 0) //pixel ray和攝影機到圓心的向量方向相反
    {
        return -1;
    }
    float distanceSquared = camToSphereLength * camToSphereLength - dotRayL * dotRayL; //b^2 = c^2 - a^2 => b為像素到球心的最短距離 
    float radiusSquared = sphereRadius * sphereRadius;
    if(distanceSquared <= radiusSquared)
    {
        float dist = radiusSquared - distanceSquared;   //一樣由勾股定理得到球體表面到像素最近點的距離平方
        dist = sqrt(dist);
        float distToSphere = dotRayL - dist;
        return distToSphere;
    }
    return -1;
}

[numthreads(8,8,1)]
void DrawSphere(uint3 id : SV_DispatchThreadID)
{
    float3 cameraToPixelRay = GetPixelRayDir(id.xy);
    float distToSphere = IsSphereContactWithRay(cameraToPixelRay, _CameraPosition, _SphereWorldPos, _SphereRadius);
    if(distToSphere >= 0)
    {
        float3 pos = _CameraPosition + cameraToPixelRay * distToSphere;
        float3 normal = normalize(pos - _SphereWorldPos);
        float diffuse = dot(normal, _LightDirection);
        float3 halfDir = normalize(_LightDirection - cameraToPixelRay);//viewDirection = -cameraToPixelRay
        float spec = pow(dot(halfDir, normal), 20);

        float3 color = diffuse * half3(1,1,1) + spec;
        _Result[id.xy] = float4(color, 1);
    } else
    {
        _Result[id.xy] = float4(id.x  / 511.0, id.y  / 511.0, 0, 1);
    }
    
}
